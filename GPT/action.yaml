openapi: 3.1.0
info:
  title: Nuclear Plant Control API
  description: |
    Accesses real-time state data for every variable exposed by the Nucleares in-game webserver
    and queues operator-authorised control commands. Use `last_updated` to detect stale telemetry;
    queue commands cautiously and monitor their execution status.
  version: 3.0.0
servers:
  - url: https://nuclearesoa-api-936z.onrender.com/api
    description: Production server
paths:
  /groups:
    get:
      operationId: listGroups
      summary: List available groups
      description: |
        Returns the group names that can be queried. `schema_groups` are the hand-authored categories from
        `variables.json`, while `inferred_groups` come from the current dataset (prefixes and nested objects).
      responses:
        '200':
          description: Collection of available groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponse'
  /state:
    get:
      operationId: getFullState
      summary: Get full snapshot
      description: |
        Returns the entire state snapshot exactly as last uploaded. Add the query parameter `flat=true`
        to receive a flattened dictionary using dotted keys and `[index]` notation for lists.
      parameters:
        - in: query
          name: flat
          required: false
          schema:
            type: boolean
          description: Whether to flatten the response into a single-level dictionary.
      responses:
        '200':
          $ref: '#/components/responses/StateResponse'
  /state/keys/{key_path}:
    get:
      operationId: getValueByPath
      summary: Drill into nested data
      description: |
        Traverses nested objects or lists using a `/`-delimited path. Path segments are matched case-insensitively.
        List indices must be integers. Example: `/state/keys/VALVULA_ENTRADA_NUCLEO_02/Sector` or
        `/state/keys/WEATHER_FORECAST_JSON/0/Day`.
      parameters:
        - in: path
          name: key_path
          required: true
          schema:
            type: string
          description: Slash-delimited path into the snapshot (encode spaces as `%20`).
      responses:
        '200':
          $ref: '#/components/responses/StateResponse'
  /state/{group}:
    get:
      operationId: getStateGroup
      summary: Get values for a group
      description: |
        Retrieves variables mapped to the requested group. Group names are case-insensitive. Use `all` or `full`
        to get the entire dataset. If the snapshot includes an object whose key matches the group name, that object
        is returned directly.
      parameters:
        - in: path
          name: group
          required: true
          schema:
            type: string
          description: Name of the group to fetch (see `/groups`).
      responses:
        '200':
          $ref: '#/components/responses/StateResponse'
  /commands:
    post:
      operationId: queueCommand
      summary: Queue control command
      description: |
        Queues an ordered set of control steps for the local sender to execute against the Nucleares webserver.
        Provide a concise `purpose`, optional `metadata`, and one or more `tasks`. Each task targets a specific
        webserver variable and specifies an operation (`set` or `pulse`).
      tags: [commands]
      security:
        - CommandToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommandRequest'
      responses:
        '200':
          description: Command accepted into the queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'
  /commands/{command_id}:
    get:
      operationId: getCommandStatus
      summary: Get command status
      description: |
        Retrieves the current status of a previously queued command, including claim information and
        any execution result reported by the local sender.
      tags: [commands]
      parameters:
        - in: path
          name: command_id
          required: true
          schema:
            type: string
          description: Identifier returned by `/commands`.
      security:
        - CommandToken: []
      responses:
        '200':
          description: Command envelope with latest status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponse'
components:
  securitySchemes:
    CommandToken:
      type: apiKey
      in: header
      name: X-Command-Token
      description: Shared secret used to authenticate command operations.
  schemas:
    ISO8601:
      type: string
      format: date-time
      nullable: true
      description: Timestamp of the last successful upload
    GenericData:
      description: The requested portion of the plant state snapshot
    StateEnvelope:
      type: object
      properties:
        last_updated:
          $ref: '#/components/schemas/ISO8601'
        data:
          $ref: '#/components/schemas/GenericData'
      required:
        - data
    GroupListResponse:
      type: object
      properties:
        last_updated:
          $ref: '#/components/schemas/ISO8601'
        schema_groups:
          type: array
          items:
            type: string
          description: Groups defined in `variables.json`
        inferred_groups:
          type: array
          items:
            type: string
          description: Additional group names discovered from the incoming dataset
      required:
        - schema_groups
        - inferred_groups
    CommandTask:
      type: object
      properties:
        operation:
          type: string
          enum: [set, pulse]
          description: Operation to perform against the target variable.
        variable:
          type: string
          description: Webserver variable name (case-insensitive).
        value:
          description: Value applied for the operation (boolean, string, or number).
        reset_value:
          description: Value applied after the hold period for `pulse` operations.
        hold_seconds:
          type: number
          description: Seconds to wait before applying `reset_value` (defaults to 1 when omitted).
        comment:
          type: string
          description: Optional human-readable note for the step.
      required:
        - operation
        - variable
        - value
    CreateCommandRequest:
      type: object
      properties:
        purpose:
          type: string
          description: Short summary of the intended outcome.
        guidance:
          type: string
          nullable: true
          description: Additional detail for human operators.
        priority:
          type: integer
          description: Dispatch priority (higher executes sooner).
        metadata:
          type: object
          description: Optional extra context passed through to the client.
        tasks:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CommandTask'
      required:
        - purpose
        - tasks
    CommandResult:
      type: object
      nullable: true
      properties:
        detail:
          type: string
          description: Operator-facing summary provided by the sender.
        outputs:
          type: object
          description: Machine-readable payload emitted by the sender.
        reported_at:
          $ref: '#/components/schemas/ISO8601'
    CommandEnvelope:
      type: object
      properties:
        id:
          type: string
        purpose:
          type: string
        guidance:
          type: string
          nullable: true
        priority:
          type: integer
        metadata:
          type: object
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/CommandTask'
        status:
          type: string
          description: Current state of the command (pending, in_progress, completed, failed).
        created_at:
          $ref: '#/components/schemas/ISO8601'
        claimed_at:
          $ref: '#/components/schemas/ISO8601'
        claimed_by:
          type: string
          nullable: true
        result:
          $ref: '#/components/schemas/CommandResult'
      required:
        - id
        - purpose
        - tasks
        - status
        - created_at
    CommandResponse:
      type: object
      properties:
        command:
          $ref: '#/components/schemas/CommandEnvelope'
        status:
          type: string
          description: Status message returned by the server.
      required:
        - command
  responses:
    StateResponse:
      description: State payload containing the requested data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StateEnvelope'
